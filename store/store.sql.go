// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: store.sql

package sqlc

import (
	"context"
)

const cleanupOldEvents = `-- name: CleanupOldEvents :exec
DELETE FROM processed_events WHERE occurred_at < NOW() - INTERVAL '1 hour' * $1
`

func (q *Queries) CleanupOldEvents(ctx context.Context, dollar_1 interface{}) error {
	_, err := q.db.ExecContext(ctx, cleanupOldEvents, dollar_1)
	return err
}

const isDuplicate = `-- name: IsDuplicate :one
SELECT COUNT(*) FROM processed_events
WHERE tenant_id = $1
  AND event_type = $2
  AND occurred_at >= NOW() - INTERVAL '1 hour' * $3
`

type IsDuplicateParams struct {
	TenantID  string      `json:"tenant_id"`
	EventType string      `json:"event_type"`
	Column3   interface{} `json:"column_3"`
}

func (q *Queries) IsDuplicate(ctx context.Context, arg IsDuplicateParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isDuplicate, arg.TenantID, arg.EventType, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const saveEvent = `-- name: SaveEvent :exec
INSERT INTO processed_events (tenant_id, event_type, occurred_at)
VALUES ($1, $2, NOW())
`

type SaveEventParams struct {
	TenantID  string `json:"tenant_id"`
	EventType string `json:"event_type"`
}

func (q *Queries) SaveEvent(ctx context.Context, arg SaveEventParams) error {
	_, err := q.db.ExecContext(ctx, saveEvent, arg.TenantID, arg.EventType)
	return err
}
