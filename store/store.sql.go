// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: store.sql

package store

import (
	"context"
)

const cleanupOldEvents = `-- name: CleanupOldEvents :exec
WITH rows_to_delete AS (
    SELECT tenant_id
    FROM processed_events
    WHERE occurred_at < NOW() - INTERVAL '1 hour' * $1
    LIMIT 10000
    )
DELETE FROM processed_events
    USING rows_to_delete
WHERE processed_events.ctid = rows_to_delete.ctid
`

func (q *Queries) CleanupOldEvents(ctx context.Context, dollar_1 interface{}) error {
	_, err := q.db.ExecContext(ctx, cleanupOldEvents, dollar_1)
	return err
}

const isDuplicate = `-- name: IsDuplicate :one
SELECT EXISTS (
    SELECT 1 FROM processed_events
    WHERE tenant_id = $1
      AND event_type = $2
      AND event_sha = $3
      AND occurred_at >= NOW() - INTERVAL '1 hour' * $4
)
`

type IsDuplicateParams struct {
	TenantID  string      `json:"tenant_id"`
	EventType string      `json:"event_type"`
	EventSha  string      `json:"event_sha"`
	Column4   interface{} `json:"column_4"`
}

func (q *Queries) IsDuplicate(ctx context.Context, arg IsDuplicateParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isDuplicate,
		arg.TenantID,
		arg.EventType,
		arg.EventSha,
		arg.Column4,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const saveEvent = `-- name: SaveEvent :exec
INSERT INTO processed_events (tenant_id, event_type, event_sha, occurred_at)
VALUES ($1, $2, $3, NOW())
`

type SaveEventParams struct {
	TenantID  string `json:"tenant_id"`
	EventType string `json:"event_type"`
	EventSha  string `json:"event_sha"`
}

func (q *Queries) SaveEvent(ctx context.Context, arg SaveEventParams) error {
	_, err := q.db.ExecContext(ctx, saveEvent, arg.TenantID, arg.EventType, arg.EventSha)
	return err
}
